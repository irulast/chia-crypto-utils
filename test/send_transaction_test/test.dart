
import 'package:chia_utils/chia_crypto_utils.dart';
import 'package:chia_utils/src/models/coin.dart';
import 'package:crypto/crypto.dart';
import 'package:hex/hex.dart';

void main() async{
  //transaction info
  const sendAmount = 10;
  const change = 1749999999990;
  // keys
  const privateKeyBites = [46, 107, 246, 196, 224, 141, 227, 202, 73, 66, 31, 241, 210, 66, 123, 41, 45, 1, 93, 38, 182, 54, 13, 90, 40, 245, 52, 88, 116, 225, 178, 75];

  // // coin
  var parentCoinInfoBites = [227, 176, 196, 66, 152, 252, 28, 20, 154, 251, 244, 200, 153, 111, 185, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3];
  var puzzleHashBites = [62, 207, 210, 97, 25, 37, 84, 23, 7, 201, 110, 104, 155, 212, 21, 241, 153, 31, 1, 138, 81, 121, 208, 167, 7, 34, 38, 216, 20, 83, 211, 119];
  var coinAmount = 1750000000000;
  var coinIdBites = [99, 139, 100, 180, 111, 4, 52, 190, 43, 25, 232, 64, 36, 238, 58, 168, 95, 196, 129, 20, 153, 189, 98, 4, 223, 204, 50, 153, 52, 207, 131, 129];

  var origionalCoin = Coin(Puzzlehash(parentCoinInfoBites), Puzzlehash(puzzleHashBites), coinAmount).id.bytes;
  //  bytes [99, 139, 100, 180, 111, 4, 52, 190, 43, 25, 232, 64, 36, 238, 58, 168, 95, 196, 129, 20, 153, 189, 98, 4, 223, 204, 50, 153, 52, 207, 131, 129])          
  //        [99, 139, 100, 180, 111, 4, 52, 190, 43, 25, 232, 64, 36, 238, 58, 168, 95, 196, 129, 20, 153, 189, 98, 4, 223, 204, 50, 153, 52, 207, 131, 129]
  // correct                 
  // // addresses
  var destinationHashBites = [190, 10, 64, 85, 44, 86, 59, 65, 96, 28, 20, 86, 83, 20, 15, 151, 210, 61, 216, 204, 82, 25, 185, 200, 73, 93, 32, 48, 115, 45, 147, 11];
  var changeHashBites = [226, 91, 15, 247, 165, 14, 74, 250, 227, 134, 205, 171, 83, 140, 112, 152, 61, 183, 240, 79, 168, 53, 180, 88, 85, 17, 79, 157, 121, 12, 65, 74];
                      //[226, 91, 15, 247, 165, 14, 74, 250, 227, 134, 205, 171, 83, 140, 112, 152, 61, 183, 240, 79, 168, 53, 180, 88, 85, 17, 79, 157, 121, 12, 65, 74]


  var privateKey = PrivateKey.fromBytes(privateKeyBites);
  var publicKey = privateKey.getG1();
  // var pubkeybytes = publicKey.toBytes();

  var calculatedPuzzle = getPuzzleFromPk(publicKey);
  var calculatedPuzzleBytes = calculatedPuzzle.serialize();
  var correctPuzzle = Program.deserialize([255, 2, 255, 255, 1, 255, 2, 255, 255, 1, 255, 2, 255, 255, 3, 255, 11, 255, 255, 1, 255, 2, 255, 255, 3, 255, 255, 9, 255, 5, 255, 255, 29, 255, 11, 255, 255, 30, 255, 255, 11, 255, 11, 255, 255, 2, 255, 6, 255, 255, 4, 255, 2, 255, 255, 4, 255, 23, 255, 128, 128, 128, 128, 128, 128, 128, 128, 255, 255, 1, 255, 2, 255, 23, 255, 47, 128, 255, 255, 1, 255, 8, 128, 128, 255, 1, 128, 255, 255, 1, 255, 4, 255, 255, 4, 255, 4, 255, 255, 4, 255, 5, 255, 255, 4, 255, 255, 2, 255, 6, 255, 255, 4, 255, 2, 255, 255, 4, 255, 23, 255, 128, 128, 128, 128, 255, 128, 128, 128, 128, 255, 255, 2, 255, 23, 255, 47, 128, 128, 128, 255, 1, 128, 255, 255, 4, 255, 255, 1, 255, 50, 255, 2, 255, 255, 3, 255, 255, 7, 255, 5, 128, 255, 255, 1, 255, 11, 255, 255, 1, 2, 255, 255, 2, 255, 6, 255, 255, 4, 255, 2, 255, 255, 4, 255, 9, 255, 128, 128, 128, 128, 255, 255, 2, 255, 6, 255, 255, 4, 255, 2, 255, 255, 4, 255, 13, 255, 128, 128, 128, 128, 128, 255, 255, 1, 255, 11, 255, 255, 1, 1, 255, 5, 128, 128, 255, 1, 128, 255, 1, 128, 128, 255, 255, 4, 255, 255, 1, 176, 151, 169, 173, 109, 184, 5, 219, 202, 75, 177, 251, 133, 37, 151, 15, 179, 45, 94, 209, 231, 195, 160, 243, 195, 164, 154, 77, 236, 83, 111, 71, 216, 212, 17, 28, 182, 255, 226, 104, 145, 12, 254, 159, 163, 141, 91, 165, 13, 255, 1, 128, 128]);
  var correctPuzzleSource = correctPuzzle.toSource();                                        
  // PUZZLES MATCH

  var correctSolution = Program.deserialize([255, 128, 255, 255, 1, 255, 255, 51, 255, 160, 190, 10, 64, 85, 44, 86, 59, 65, 96, 28, 20, 86, 83, 20, 15, 151, 210, 61, 216, 204, 82, 25, 185, 200, 73, 93, 32, 48, 115, 45, 147, 11, 255, 10, 128, 255, 255, 51, 255, 160, 226, 91, 15, 247, 165, 14, 74, 250, 227, 134, 205, 171, 83, 140, 112, 152, 61, 183, 240, 79, 168, 53, 180, 88, 85, 17, 79, 157, 121, 12, 65, 74, 255, 134, 1, 151, 116, 32, 219, 246, 128, 255, 255, 60, 255, 160, 0, 163, 216, 5, 99, 63, 91, 224, 55, 190, 128, 43, 96, 25, 143, 110, 73, 54, 138, 39, 211, 33, 57, 135, 152, 131, 164, 131, 48, 222, 187, 7, 128, 128, 255, 128, 128]);

  var correctSolutionSource = correctSolution.toSource();

  final sendCoin = Coin(Puzzlehash(origionalCoin), Puzzlehash(destinationHashBites), sendAmount).id.bytes;
  // bytes [47, 112, 223, 83, 239, 94, 44, 90, 69, 29, 3, 187, 219, 7, 40, 253, 12, 225, 108, 201, 184, 24, 189, 220, 74, 119, 37, 91, 55, 197, 155, 10])
  // coect [47, 112, 223, 83, 239, 94, 44, 90, 69, 29, 3, 187, 219, 7, 40, 253, 12, 225, 108, 201, 184, 24, 189, 220, 74, 119, 37, 91, 55, 197, 155, 10]
  final changeCoin = Coin(Puzzlehash(origionalCoin), Puzzlehash(changeHashBites), change).id.bytes;
  // bytesNat[118, 173, 156, 72, 20, 93, 98, 82, 191, 73, 99, 85, 79, 248, 233, 198, 64, 39, 83, 42, 157, 49, 214, 227, 61, 206, 246, 108, 76, 210, 54, 212])
  // correct [118, 173, 156, 72, 20, 93, 98, 82, 191, 73, 99, 85, 79, 248, 233, 198, 64, 39, 83, 42, 157, 49, 214, 227, 61, 206, 246, 108, 76, 210, 54, 212]
  var createCoinAnnouncementMessage = sha256.convert(origionalCoin + sendCoin + changeCoin).bytes;
  var solutionConditions = Program.list(
            [
              Program.fromBigInt(BigInt.from(0x01)), // q
              Program.list([
                Program.fromInt(51),
                Program.fromBytes(destinationHashBites),
                Program.fromInt(sendAmount)
              ])
            ] + 
            (
              change > 0 
                ? 
                  [
                    Program.list([
                      Program.fromInt(51),
                      Program.fromBytes(changeHashBites),
                      Program.fromInt(change)
                    ])
                  ] 
                : 
                  []
            ) +
            [
              Program.list([
                Program.fromInt(60),
                Program.fromBytes(createCoinAnnouncementMessage),
              ])
            ]
          );
  var solution = Program.list([Program.nil, solutionConditions, Program.nil]);

  

  var calculatedSolutionSource = solution.toSource();

  final puzzle = getPuzzleFromPk(publicKey);

  // var puzzleBites = puzzle.toSource();
  
  var result = puzzle.run(solution);
  var resultBytes = result.program.serialize();
  // log(result.program.toList()[0].toSource());
  var addsigm = result.program.toList()[0].toList()[2].atom + origionalCoin + const HexDecoder().convert('ae83525ba8d1dd3f09b277de18ca3e43fc0af20d20c4b3e92ef2a48bd291ccb2');
  // actual  [143, 65, 18, 54, 113, 208, 86, 232, 173, 169, 254, 53, 133, 178, 153, 218, 238, 194, 175, 181, 43, 74, 38, 45, 246, 191, 243, 209, 198, 11, 129, 197])
  // correct [143, 65, 18, 54, 113, 208, 86, 232, 173, 169, 254, 53, 133, 178, 153, 218, 238, 194, 175, 181, 43, 74, 38, 45, 246, 191, 243, 209, 198, 11, 129, 197, 99, 139, 100, 180, 111, 4, 52, 190, 43, 25, 232, 64, 36, 238, 58, 168, 95, 196, 129, 20, 153, 189, 98, 4, 223, 204, 50, 153, 52, 207, 131, 129, 204, 213, 187, 113, 24, 53, 50, 191, 242, 32, 186, 70, 194, 104, 153, 26, 63, 240, 126, 179, 88, 232, 37, 90, 101, 195, 10, 45, 206, 14, 95, 187]

  var synthSecretKey = calculateSyntheticPrivateKey(privateKey);
  final syntheticPublicKeyFromSecretKey = synthSecretKey.getG1().toBytes();
  // actual [11, 163, 136, 250, 155, 232, 49, 187, 243, 3, 105, 93, 159, 205, 244, 97, 240, 225, 98, 186, 133, 51, 125, 121, 10, 76, 12, 33, 118, 43, 108, 175])
  // corect [11, 163, 136, 250, 155, 232, 49, 187, 243, 3, 105, 93, 159, 205, 244, 97, 240, 225, 98, 186, 133, 51, 125, 121, 10, 76, 12, 33, 118, 43, 108, 175]
  final pk = JacobianPoint.fromBytesG1(result.program.toList()[0].toList()[1].atom).toBytes();
  final signature = AugSchemeMPL.sign(synthSecretKey, addsigm);
  // var varified = AugSchemeMPL.verify(pk, addsigm, signature);
  final signatureBytes = signature.toBytes();
  // actual: [142, 255, 97, 55, 252, 174, 105, 163, 173, 23, 127, 18, 137, 205, 36, 36, 143, 252, 168, 86, 99, 47, 146, 0, 151, 33, 215, 211, 163, 193, 34, 254, 87, 166, 33, 59, 138, 99, 57, 58, 190, 230, 140, 102, 216, 220, 104, 216, 18, 221, 94, 9, 218, 154, 211, 125, 253, 7, 106, 102, 211, 230, 95, 246, 209, 35, 2, 202, 27, 84, 119, 209, 85, 48, 142, 171, 223, 202, 88, 64, 128, 97, 210, 102, 96, 61, 140, 172, 121, 223, 203, 240, 1, 168, 63, 54])
  // corect: [142, 255, 97, 55, 252, 174, 105, 163, 173, 23, 127, 18, 137, 205, 36, 36, 143, 252, 168, 86, 99, 47, 146, 0, 151, 33, 215, 211, 163, 193, 34, 254, 87, 166, 33, 59, 138, 99, 57, 58, 190, 230, 140, 102, 216, 220, 104, 216, 18, 221, 94, 9, 218, 154, 211, 125, 253, 7, 106, 102, 211, 230, 95, 246, 209, 35, 2, 202, 27, 84, 119, 209, 85, 48, 142, 171, 223, 202, 88, 64, 128, 97, 210, 102, 96, 61, 140, 172, 121, 223, 203, 240, 1, 168, 63, 54]
  //         [149, 85, 109, 97, 73, 67, 139, 26, 95, 60, 29, 73, 95, 85, 229, 153, 161, 165, 56, 192, 192, 242, 250, 105, 66, 106, 98, 250, 238, 110, 49, 210, 4, 91, 110, 143, 215, 21, 16, 41, 66, 137, 213, 6, 211, 182, 101, 56, 18, 195, 125, 153, 0, 95, 238, 24, 108, 215, 209, 103, 136, 70, 125, 15, 149, 164, 43, 185, 166, 95, 253, 102, 25, 4, 74, 63, 161, 85, 121, 21, 229, 44, 197, 23, 130, 58, 230, 191, 70, 240, 83, 98, 243, 187, 104, 36]

  var aggregate = AugSchemeMPL.aggregate([signature]).toBytes();
  //actual:   [142, 255, 97, 55, 252, 174, 105, 163, 173, 23, 127, 18, 137, 205, 36, 36, 143, 252, 168, 86, 99, 47, 146, 0, 151, 33, 215, 211, 163, 193, 34, 254, 87, 166, 33, 59, 138, 99, 57, 58, 190, 230, 140, 102, 216, 220, 104, 216, 18, 221, 94, 9, 218, 154, 211, 125, 253, 7, 106, 102, 211, 230, 95, 246, 209, 35, 2, 202, 27, 84, 119, 209, 85, 48, 142, 171, 223, 202, 88, 64, 128, 97, 210, 102, 96, 61, 140, 172, 121, 223, 203, 240, 1, 168, 63, 54]) 
  // correct: [142, 255, 97, 55, 252, 174, 105, 163, 173, 23, 127, 18, 137, 205, 36, 36, 143, 252, 168, 86, 99, 47, 146, 0, 151, 33, 215, 211, 163, 193, 34, 254, 87, 166, 33, 59, 138, 99, 57, 58, 190, 230, 140, 102, 216, 220, 104, 216, 18, 221, 94, 9, 218, 154, 211, 125, 253, 7, 106, 102, 211, 230, 95, 246, 209, 35, 2, 202, 27, 84, 119, 209, 85, 48, 142, 171, 223, 202, 88, 64, 128, 97, 210, 102, 96, 61, 140, 172, 121, 223, 203, 240, 1, 168, 63, 54]
  var walletSk = PrivateKey.fromBytes([112, 75, 48, 216, 155, 153, 152, 41, 16, 25, 4, 64, 246, 89, 118, 197, 145, 67, 185, 73, 25, 62, 108, 48, 32, 73, 98, 157, 123, 76, 67, 170]);
 
  
}